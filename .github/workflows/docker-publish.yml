# GitHub Action 的名称
name: Publish Multi-Platform Docker Image

# 此 Action 的触发条件：当一个新的 Release 被创建时
on:
  release:
    types: [created]

# Action 要执行的任务
jobs:
  build_and_push_image:
    # 任务运行的环境，使用最新的 Ubuntu 系统
    runs-on: ubuntu-latest

    # 任务的步骤
    steps:
      # 第一步：检出（下载）你的 GitHub 项目代码到运行环境中
      - name: Checkout repository
        uses: actions/checkout@v4

      # 设置 QEMU，这是实现跨平台构建的前提
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 设置 Docker Buildx，这是执行多平台构建的工具
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录到 Docker Hub
      # 它会使用我们之后在 GitHub Secrets 中设置的用户名和 Token
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 从 Release 事件中提取元数据（例如标签名称）
      # 这使得我们可以用版本号（如 v1.1.0）来标记我们的镜像
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          # 将镜像名称修改为您的 Docker Hub 用户名 / ipanel
          images: ${{ secrets.DOCKER_USERNAME }}/ipanel

      # 新增步骤：为 Docker 构建创建一个空的配置文件
      - name: Create empty config.json for build
        run: echo "{}" > config.json

      # 构建并推送多平台 Docker 镜像
      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # 关键改动：指定要构建的平台，amd64 和 arm64 基本覆盖了所有主流 NAS 设备
          platforms: linux/amd64,linux/arm64
          # 推送镜像到 Docker Hub
          push: true
          # 为镜像打上标签，例如：
          # your-docker-username/ipanel:latest
          # your-docker-username/ipanel:v1.1.0
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
